---
title: "R Wheel Running Analysis"
format: 
  html:
    theme: cerulean
    toc: true
    page-layout: full
    smooth-scroll: true
    self-contained: true
---

## Welcome!

This is a Quarto document built to help you analyze .log files from mouse wheel running experiments.

## How to use this notebook:

1.  Set your ‚öôÔ∏è options for analysis
2.  Run code chunks 1-3 to set up and create your folder structure.
3.  Dump all the .log files in the folder created by the script in `data` \> `01_Raw_data`.
4.  Then run the remaining code chunks in order.
5.  To run everything at once and produce a nice HTML output, Click the **Render** button above ![](images/paste-4C231B7D.png){width="50" height="15"}

When you execute code within the notebook, the results appear beneath the code. You can run code chunks one by one by clicking the *Run* button in the upper right corner of the chunk or by placing your cursor the code chunk and pressing *Ctrl+Shift+Enter*. To run all code chunks, you can *Ctrl+Alt+R* or hit the Run button and select "Run All" or "Restart R and Run all."

### üìö Setup Libraries

This code block loads necessary libraries and sets up the directory structure necessary for the project. You need to run it, but it is not included in your output notebook.

```{r 1. setup, echo=FALSE}

# Load necessary libraries

## This package-checking chunk of code is from vikram: https://vbaliga.github.io/verify-that-r-packages-are-installed-and-loaded/
packages = c("colorspace", "tidyr", "here", "grid", "stringr", "matrixStats", "reshape2", "dplyr", "vroom", "fs", "progress", "data.table", "ggplot2","behavr", "ggetho", "report", "sleepr", "zeitgebr")

## Now load or install&load all
package.check <- lapply(
  packages,
  FUN = function(x) {
    if (!require(x, character.only = TRUE)) {
      install.packages(x, dependencies = TRUE)
      library(x, character.only = TRUE)
    }
  }
)
cmark="~ DONE! ~"

#This code can be used to update all your packages: 
# update.packages(ask = FALSE)

cat("\n",cmark," 1.", length((.packages())), "packages loaded")
```

### ‚öôÔ∏è Options for analysis -- [USER INPUT REQUIRED]{style="color: red;"}

-   Select your options for your analysis in the code below. `TRUE` for True, `FALSE` for False.

```{r 2. options, echo=FALSE}
# Set these variables for your experiment:

expName <- "Exp1"           # Name for your experiment, include no spaces, just letters, numbers, and underscores
lightsOnTime <- 7           # Time lights come ON. Default 7 = 7 AM
lightsOffTime <- 19         # Time lights go OFF. Default 19 = 7 PM
timeChange <- FALSE             # Was there a time change in this experiment? Default = False, no time change


# If you have a time change:

dayOfChange <- 14            # What experimental day the time change occurs on (First day of experiment is Day 1). Leave 0 if no time change
newlightsOnTime <- 7          # If you have a time change, what is the new lights ON time?
newlightsOffTime <- 12         # If you have a time change, what is the new lights OFF time?

# How is your .log file header organized? 

header <- c('MouseName', 'Date', 'StartTime', 'bin_secs', 'CageNum', 'Genotype', 'Sex')

# How is your experiment organized? Name the phases of your experiment and the day each phase starts on. 
# Phases will extend from that day up until the next start day listed or until the end of the experiment: 

phases <- c("Acclimation", "PostAcclimation")
phaseStart <- c(1, 4)

# output the settings - NOTHING FURTHER TO EDIT
dayLengthOrig <- lightsOffTime - lightsOnTime
dayLengthNew <- newlightsOffTime - newlightsOnTime

cat("Settings for",expName,": \n", 
    str_pad(paste("Experiment name",":"), 22, "left"),  expName, "\n",
    str_pad(paste("Lights On ",":"), 22, "left"),  lightsOnTime, "\n",
    str_pad(paste("Lights Off",":"), 22, "left"),  lightsOffTime, "\n",
    str_pad(paste("Time change?Ô∏è",":"), 22, "left"),  timeChange, "\n\n")

if(timeChange){
  cat("Time change settings:Ô∏è\n", 
      str_pad(paste("Day of change", ":"), 22, "left"), dayOfChange, "\n",
      str_pad(paste("Lights ON ", ":"), 22, "left"), str_pad(lightsOnTime, 2, "right"), "-->",newlightsOnTime, "\n",
      str_pad(paste("Lights OFF", ":"), 22, "left"), str_pad(lightsOffTime, 2, "right"), "-->", newlightsOffTime)
}
cat("\n\n ",cmark," 02.", "Settings loaded! \n")

```

### üìÅ Make directory structure for the project

```{r 3. make_dirs, echo=FALSE}

## Make directories
dir_scripts <- here("scripts")                          #where the scripts are
dir_rawData <- here("data", "01_Raw_data")              #where the raw data is
dir_orgData <- here("data", "02_Organized_data")        #where the organized data is (still raw files)
dir_doc <- here("doc")
dir_figs <- here("figs")
dir_results <- here("results")
dir_table_ind <- here(dir_results, "01_Individual_mice")

for(d in list(dir_doc, here("data"), dir_rawData, dir_orgData,dir_figs,dir_results, dir_table_ind))if(!dir.exists(d)){dir.create(d)}
options(stringsAsFactors=FALSE)

cat("\n", cmark, "3. Made folder structure here: ", here())
```

### üßπ Organize, Load, and Clean Data

This step organizes the mouse .log files into 1 folder per mouse, then loads the data into R and creates a metadata table from the data frames.

```{r 4. Organize data, include=FALSE}
## organize .log files into 1 folder per animal
source(here(dir_scripts, "01_organize_data_files.R")) 
cat("\n", cmark, "4. Data organized")
```

If you'd like to remove animals, now is the time to remove those folders from data \> 02_Organized_data.

```{r 5. Load data, include=FALSE}
## read data into R

mouseNames <- list.dirs(dir_orgData, full.names = F)[-1]
nMice <- length(mouseNames)
headerLength <- length(header)
## This gets basic running data for each mouse
full_metadata <- data.frame(matrix(NA_character_, nrow = headerLength, ncol = nMice))

pb <- progress_bar$new(total=nMice)
idx <- 1
for (mouse in mouseNames){
  files <- fs::dir_ls(dir_orgData, glob = paste0("*", mouse,"*log"), recurse=T)
  df <- vroom(files, delim="/t", col_names="raw", skip=headerLength, show_col_types = FALSE)
  full_metadata[idx] <- vroom(files[1], delim="/t", col_names=mouse, n_max=headerLength, show_col_types = FALSE)
  assign(mouse, df)
  pb$tick()
  idx <- idx+1
}
#Fix metadata table
full_metadata <- transpose(full_metadata)
colnames(full_metadata) <- header

#For each column in metadata, keep only the string after ": ", no change if there's no ": " To deal with style of output on second Raspberry Pi
full_metadata <- full_metadata %>% mutate_all(~sub(".*: ", "", .))
#make the id for each mouse
full_metadata <- full_metadata %>% mutate(id = paste(MouseName, expName, sep="|"))
#make metadata into a data table
full_metadata <- data.table(full_metadata)

cat(cmark, "5. Finished loading ",nMice," log files ", "üê≠")
```

#### ‚ùìOptional: Fix incorrect metadata

If you'd like to change metadata in your experiment, you can do so in these two code cells. The first is designed specifically for genotype. You can replace `original_name` with whatever genotype you want to replace and `new_name` with whatever you want the new genotype to be.

```{r Optional: Edit genotypes?}
print("Here are the genotypes in your current experiment:")
print(unique(full_metadata$Genotype))

# Replace?
full_metadata[Genotype=="original_name",Genotype:="new_name"]
```

This block will make all `Sex` values uppercase. Don't run this if you don't have a column called "Sex" in `full_metadata`

```{r Optional: Edit sex}
full_metadata$Sex <- toupper(full_metadata$Sex)
```

This block is for more intense editing of mice (e.g., you made a mistake with one mouse and need to modify it). After running this cell a popup will appear in which you can edit anything in your metadata table. Depending on the number of mice, this could be slow.

```{r Optional: Edit your mice?}
print(full_metadata)
full_metadata <- edit(full_metadata)
print(full_metadata)
```

Use this block to check the metadata and if necessary, you can re-run the previous code blocks.

```{r Optional: Check your metadata!}
print(full_metadata)
```

### üî¢ Add columns to data

This chunk takes your data for each mouse and adds additional variables, like speed, time of day, and experimental phase information. Data columns include:

-   `expDay` (1, 2, 3...# of experimental days)
-   `speed` (should be in meters/min)
-   `elapsedDays` same as `expDay` but days can be fractional
-   `hour` (clock time hour)
-   `minutes` (clock time minutes)
-   `activeFactor` (whether the animal is in its active phase (lights OFF -\> TRUE))
-   `t` (time in seconds since the first lights ON (can precede the start of the recording, usually this is lights on on Day 1)
-   `expPhase` (which experimental phase each time point belongs to)
-   `moving` (whether that individual animal moved during that 10 second period))

```{r 6. Add columns to data, include=FALSE}
#Source functions
source(here(dir_scripts, "notebook_functions.R")) 

pb <- progress_bar$new(total=nMice)
for (mouse in mouseNames){
  df <- get(mouse)

  df <- addSpeedTime(df)
  assign(mouse, df)

  df <- addHoursActive(mouse, full_metadata)
  assign(mouse, df)
  
  df <- addExpPhase(df, phases, phaseStart)

  if(timeChange){
    df <- addTimeChange(df, dayOfChange = dayOfChange, dayChangeEnds=F, binSize=10, newlightsOnTime=newlightsOnTime, newlightsOffTime= newlightsOffTime)
  }
  df$id <- paste(mouse, expName, sep="|")
  assign(mouse, df)
  pb$tick()
  cat("\n")
}

cat(cmark, "6. Finished adding data for ",nMice," mice ",'üêÅ\n')

```

Now we stitch everything together into 1 big data table. We additionally add an `id` variable for each experimental mouse that is the mouse ID + the experiment name.

```{r 7. Make behavr table, results = 'asis', echo=FALSE}

#make behavr table
data <- data.table::rbindlist(mget(mouseNames))
rm(list = ls()[ls() %in% mouseNames]) #remove the mouse dfs since we don't need them anymore
setkey(full_metadata, id)
setkey(data, id)
full_dt <- behavr(data, full_metadata)
full_dt[, moving:= speed>0] #if speed is greater than 0, moving=TRUE
summary(full_dt)

clean_dt <- 
  rejoin(full_dt[,
           .(# this is where the computation happens
             moving_fraction = mean(moving)
             ),
           by=id])

# remove mice that don't run 1% of the time... 
removed <- clean_dt %>% group_by(id) %>% filter(moving_fraction <= 0.01) %>% pull(MouseName)

full_metadata<- merge(x = full_metadata, y = clean_dt[ , c("id", "moving_fraction")], by=c("id"), all.x=TRUE)
full_metadata <- full_metadata[,c("Removed"):= full_metadata[["moving_fraction"]]<=0.01]
metadata <- full_metadata[!(MouseName %in% removed),]
dt_subset <- full_dt[!(xmv(MouseName) %in% removed),]
setkey(dt_subset, id)
setkey(metadata, id)
dt <- behavr(dt_subset, metadata)


#remove variables we don't need anymore
remove(data, df, clean_dt)

cat("\n",cmark, "7.", length(removed), " mice were removed because they ran **less than 1%** of the experiment: ", paste0("\n",removed), " \n")
```

### üìÜ Experimental timeline

Now we add in the different phases of the experiment in a `expPhase` column.

```{r 8. Add and display experiment phases, echo=FALSE, fig.height=2, fig.width=6}

phaseDuration <- rep(0,length(phases))
for(i in seq(1, length(phases)-1)){
  phaseDuration[i] <- abs(phaseStart[i]-phaseStart[i+1])
}

phase_df <- data.frame(phase = phases, start = phaseStart, duration=phaseDuration)
phase_df$duration[length(phases)] <- max(dt$expDay)-phase_df$start[length(phases)]

# Display approx. experimental timeline
ggplot(phase_df, aes(fill=factor(phase, levels=rev(phases[1:(length(phases))])), x=duration, y="Experimental timeline")) + 
  geom_bar(position="stack", stat="identity")+
  theme_light()+
  coord_fixed(ratio=0.9)+
  labs(fill="Phase", y="", x="Day")+
  scale_x_continuous(breaks=c(phase_df$start-1, max(dt$expDay)-1), labels=c(phase_df$start, max(dt$expDay)), expand = c(0, 0))+
  scale_y_discrete(expand = c(0, 0))+
  scale_fill_brewer(guide = guide_legend(reverse = TRUE), palette="Paired")+
  theme(legend.position="left", axis.text.y=element_blank(),  axis.ticks = element_blank())
cat(cmark, "8. Phase information added to data table. üìã\n")
```

### üíæ Save tables

This is optional, if you want to save out tables of binned data for each mouse.

```{r 9. Save tables of metadata and binned data, include=TRUE}

# Would you like to save data every X min? (default True)
saveBinned <- TRUE
desired_bin <- 5 # min

#######################
#Save Metadata table
write.csv(full_metadata, file=here(dir_results, "exp_metdata.csv"))


#Save daily and light cycle data for every mouse
  dt_daily_byLC <- dt %>% dplyr::group_by(id, expDay, activeFactor) %>% dplyr::summarize(avg_speed = mean(speed))
    filename <- paste0(expName,"_daily_bylightcycle.csv")
    write.csv(dt_daily_byLC, file=here(dir_results, filename), row.names = FALSE)

#Save just daily data for every mouse
  dt_daily <- dt %>% dplyr::group_by(id, expDay) %>% dplyr::summarize(avg_speed = mean(speed))
    filename <- paste0(expName,"_daily.csv")
    write.csv(dt_daily, file=here(dir_results, filename), row.names = FALSE)
  cat(cmark, paste0('9. Finished summarizing daily data for ',nMice,' mice '), 'üêÅ')

if (saveBinned){
  pb <- progress_bar$new(total=nMice)
for (eachid in metadata[,id]){
  df <- full_dt[id==eachid,]
  mouse <- sub("\\|.*", "", eachid)
  t_min <- min(df$t)/behavr::mins(1)
  t_max <- max(df$t)/behavr::mins(1)
  df <- data.frame("MeanSpeed"=tapply(df$speed, cut(df$t/behavr::mins(1), seq(t_min, t_max, by=desired_bin)), mean), "ExpDay"=tapply(df$expDay, cut(df$t/behavr::mins(1), seq(t_min, t_max, by=desired_bin)), median))
  filename <- paste0(mouse,"_",desired_bin,"_min.csv")
  write.csv(df, file=here(dir_table_ind, filename), row.names = F)
  pb$tick()
}

cat('\n', cmark, '9. Finished collapsing data into ',desired_bin,' minute bins (function = mean) for ',nMice,' mice ', 'üêÅ')
}

#remove(full_dt)
startDay <- 1
endDay <- max(dt$expDay)
```

### üìà Make graphs

#### Bout analysis

```{r 10. Bout analysis, fig.width=8, echo=FALSE}

# for each phase
for(phase in phases){
  phaseforfilename <- str_replace_all(phase, ":", "-")
# subset dt
  dt_phase <- dt %>% filter(expPhase == phase)
# bout analysis
  bout_dt <- sleepr::bout_analysis(moving, dt_phase)
  bout_dt <- bout_dt[moving == TRUE, -"moving"]
  stat_bout <- bout_dt[,
        .(n_bouts = .N,
          mean_bout_length = mean(duration)),
        by=id]
  phase_meta <- dt_phase[stat_bout, meta=T]
# save table
  write.csv(phase_meta, file=here(dir_results, paste0(phaseforfilename,"_mean_bout_length.csv")))
# make figure over time, facet by sex
  g1 <- ggetho(bout_dt, aes(y=duration / 60, color=Genotype), time_wrap = hours(24)) + 
      stat_pop_etho() + 
      facet_grid(Sex ~ .) +
      scale_y_continuous(name= "Bout length (min)") +
      ggtitle(paste("Bout Length during", phase))+
      theme_light()
  print(g1)
  ggsave(here(dir_figs, paste0(phaseforfilename, "_mean_bout_length_over_time.png")))
  
# make simple figure bar graph with sex
  g2<- ggplot(phase_meta, aes(y=mean_bout_length/60, x=Genotype, color=Sex))+
      stat_boxplot(geom = "errorbar", width = 0.5, position=position_dodge(0.8))+
      geom_boxplot(position=position_dodge(0.8))+
      geom_jitter(position=position_dodge(0.8), alpha=0.5)+
      scale_y_continuous(name= "Bout length (min)") +
      ggtitle(paste("Avg. Bout Length by during", phase, "by sex and genotype"))+
      theme_light()
  print(g2)
  
  ggsave(here(dir_figs, paste0(phaseforfilename, "_mean_bout_length_boxplot_geno_sex.png")))
# make simple figure bar graph without sex
  g3 <- ggplot(phase_meta, aes(y=mean_bout_length/60, x=Genotype, color=Genotype))+
      stat_boxplot(geom = "errorbar", width = 0.5)+
      geom_boxplot(outlier.shape = NA)+
      geom_jitter(alpha=0.5, width=0.1)+
      scale_y_continuous(name= "Bout length (min)") +
      ggtitle(paste("Avg. Bout Length by during", phase, "by genotype"))+
      theme_light()
  print(g3)
# save figure
  ggsave(here(dir_figs, paste0(phaseforfilename, "_mean_bout_length_boxplot_geno.png")))
}

```

#### Raw activity for each individual mouse

```{r 11. Raw activity ind., fig.width=15, fig.height=4, echo=FALSE}
abbrev_mice <- metadata$MouseName
for (eachMouse in abbrev_mice){
  geno <- metadata[MouseName==eachMouse, Genotype]
  sex <- metadata[MouseName==eachMouse, Sex]
  p <- ggetho(dt[xmv(MouseName)==eachMouse,], aes(y=speed, color=id))
    if(timeChange){
      p <- p+ stat_ld_annotations(height=1, alpha=0.2, outline = NA, x_limits = behavr::days(c(0,dayOfChange-1)), l_duration=behavr::hours(dayLengthOrig)) +
                # on top of it, a second layer that
                # starts at day 7 thoughout day 30,
                # and where L colour is grey
      stat_ld_annotations(height=1, alpha=0.2, outline=NA, x_limits = behavr::days(c(dayOfChange-1,endDay-1)),l_duration=behavr::hours(dayLengthNew), phase = hours(newlightsOnTime-lightsOnTime))
    }
    else{
      p <- p+stat_ld_annotations(height=1, alpha=0.2, outline = NA)
    }
  p <- p+stat_pop_etho() +
          scale_color_manual(values=c("blue4"))+
          ylab("Speed (meters/min)")+
          coord_cartesian(expand=FALSE)+
          theme_classic()+
          theme(legend.position = "None")+
    labs(title=paste("Raw activity for mouse", eachMouse),
                subtitle=substitute(italic(x)~sex, list(x=geno, sex=sex)))
  print(p)
  ggsave(paste0(eachMouse,"_rawActivity.png"), plot=p, path=dir_figs)
}

```

#### Polar activity plot

```{r 12. Polar activity by genotype, echo=FALSE}
for (phase in phase_df$phase){
  phaseforfilename <- str_replace_all(phase, ":", "-")
  dt_sub <- dt[expPhase==phase,]
  p <- ggetho(dt_sub, aes(y=speed, color=Genotype), time_wrap = days(1))
  if(timeChange){
    p <- p+stat_ld_annotations(height=15,
                              alpha=.2,
                              x_limits = c(0, behavr::days(1)),
                              outline = NA, l_duration=behavr::hours(dayLengthOrig)) +
    stat_ld_annotations(height=15,
                              alpha=.1,
                              x_limits = c(0, behavr::days(1)),
                              ld_colours = c("grey", "black"), l_duration=behavr::hours(dayLengthNew), phase = hours(newlightsOnTime-lightsOnTime))
  }
  else{
    p <- p + stat_ld_annotations(height=15,
                              alpha=.2,
                              x_limits = c(0, behavr::days(1)),
                              outline = NA, l_duration=behavr::hours(dayLengthOrig))
  }
  p <- p+stat_pop_etho() +
  ylim(0,18)+
  coord_polar()+
  ggtitle(paste("Activity during", phase))
  ggsave(paste0(phaseforfilename,"_polar.png"), plot=p, path=dir_figs)
  print(p)
}

```

#### Actogram graph for all mice

```{r 13. Actogram facet, fig.height=10, echo=FALSE}
p <- ggetho(dt, aes(z = speed), multiplot = 2, multiplot_period = behavr::hours(24))+
  stat_bar_tile_etho()+
  stat_ld_annotations(l_duration=behavr::hours(dayLengthOrig)) +
  # on top of it, a second layer that
  # starts at day 14 thoughout day 30,
  # and where L colour is grey
  stat_ld_annotations(x_limits = behavr::days(c(1,2)),
                      ld_colours = c("grey", "black"), l_duration=behavr::hours(dayLengthNew), position=position_nudge(x=0, y=-2), phase = hours(newlightsOnTime-lightsOnTime))+
  #scale_y_discrete(labels=rev(seq(startDay, endDay-1)))+

  facet_wrap( ~ MouseName + Genotype + Sex, ncol=4, labeller = label_wrap_gen(multi_line=FALSE, width=50))+
  scale_y_discrete(labels=rev(everyThird(seq(startDay, endDay-1))))+
  xlab("Day")+
  theme(text = element_text(size = 10))


if(timeChange && dayOfChange!=0){
  intercept <- endDay-dayOfChange-0.5
  p= p+  geom_hline(yintercept=intercept, color="tomato", linetype="solid")
}

print(p)
ggsave("all_actograms.png", plot=p, path=dir_figs)

```

#### Periodogram

```{r 14. Periodogram, echo=FALSE}

for (phase in phase_df$phase){
  dt_sub <- dt[expPhase==phase,]
  phaseforfilename <- str_replace_all(phase, ":", "-")
  per_xsq_dt <- periodogram(speed, 
                        dt_sub,
                        FUN = chi_sq_periodogram)
  per_xsq_dt <- find_peaks(per_xsq_dt)
  write.csv(per_xsq_dt, file=here(dir_results, "Periodogram_all_mice"), row.names = FALSE)

  g <- ggperio(per_xsq_dt, aes(
                    y = power - signif_threshold,
                    color=Genotype)) + 
                    stat_pop_etho() +
                    ggtitle(paste("Periodogram during", phase))

  print(g)
  ggsave(here(dir_figs, paste0(phaseforfilename, "_periodogram.png")))
}

```

#### Percent time running

```{r 15. Fraction of time running, echo=FALSE}
hex_colors <- c("#f8766d", "#7cae00", "#00bfc4", "#c77cff")

for (phase in phase_df$phase){
  dt_sub <- dt[expPhase==phase,]
  phaseforfilename <- str_replace_all(phase, ":", "-")
  summary_dt <- rejoin(dt_sub[,
           .(
             # this is where the computation happens
             phase_moving_fraction = mean(moving),
             active_moving_fraction = mean(moving[activeFactor],na.rm=TRUE),
             inactive_moving_fraction = mean(moving[!activeFactor],na.rm=TRUE)
             ),
           by=id])
  g1 <- ggplot(summary_dt, aes(x=Sex, y=phase_moving_fraction, fill=Genotype)) + 
    geom_boxplot(outlier.colour = NA) +
    geom_point(position=position_dodge(width=0.75), aes(color=Genotype), alpha=0.5)+
    scale_fill_manual(values = hex_colors) + 
    scale_color_manual(values = darken(hex_colors, amount = 0.5))+
    scale_y_continuous(name= "Fraction of time running",labels = scales::percent)+
    ggtitle(paste("Percent time running during", phase, "by sex and genotype"))+
    theme_classic()
  print(g1)
  ggsave(here(dir_figs, paste0(phaseforfilename, "_percent_time_running_bySexGeno.png")))
  g2 <- ggplot(summary_dt, aes(x=Genotype, y=phase_moving_fraction, fill=Genotype)) + 
    geom_boxplot(outlier.colour = NA) +
    geom_jitter(width=0.1, aes(color=Genotype), alpha=0.5, size=2)+
    scale_fill_manual(values = hex_colors) + 
    scale_color_manual(values = darken(hex_colors, amount = 0.5))+
    scale_y_continuous(name= "Fraction of time running",labels = scales::percent)+
    ggtitle(paste("Percent time running during", phase, "by genotype"))+
    theme_classic()
  print(g2)
  ggsave(here(dir_figs, paste0(phaseforfilename, "_percent_time_running_byGeno.png")))
  setnames(summary_dt, "phase_moving_fraction", paste0(phase,"_moving_fraction"))
  write.csv(summary_dt, file=here(dir_results, paste0(phaseforfilename,"_percent_time_running.csv")))
}

```

### üìë Methods and References

```{r 16. Ref, echo=FALSE, results = 'asis'}
cat(report(sessionInfo()))
cat("\n\n\nSession info for configuration\n\n")
print(sessionInfo())
```

```{css, echo=FALSE}
p {
  margin-bottom: 25px;
}
h1{
  color: #FD3E81;
}
h2{
  color: #007991;
}
h3 {
  margin-top: 50px;
  color: #70B77E;
}
.list-group-item.active, .list-group-item.active:focus, .list-group-item.active:hover {
    background-color: #07004D;
    border-color: #337ab7;
}
#quarto-margin-sidebar {
    width: 400px;
}
```
